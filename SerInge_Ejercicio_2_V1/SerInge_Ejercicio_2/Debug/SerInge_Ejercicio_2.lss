
SerInge_Ejercicio_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003ce  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  00000468  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a7  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000714  00000000  00000000  00000db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034a  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000178  00000000  00000000  00001c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  9e:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <apagado>:
	void (*funcionamiento)(void);
	struct estado *siguiente;
}Estado;

void apagado(void){
	PORTD = 0;
  a6:	1b b8       	out	0x0b, r1	; 11
  a8:	08 95       	ret

000000aa <parpadeo>:
	
}
void parpadeo(){
 	PORTD =SEC_1  ;
  aa:	85 e5       	ldi	r24, 0x55	; 85
  ac:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f e9       	ldi	r18, 0x9F	; 159
  b0:	86 e8       	ldi	r24, 0x86	; 134
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <parpadeo+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <parpadeo+0x14>
  be:	00 00       	nop
	_delay_ms(DELAY);
	PORTD =SEC_2;
  c0:	8a ea       	ldi	r24, 0xAA	; 170
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	2f e9       	ldi	r18, 0x9F	; 159
  c6:	86 e8       	ldi	r24, 0x86	; 134
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <parpadeo+0x20>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <parpadeo+0x2a>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <desplazamiento>:
	_delay_ms(DELAY);
	
}
void desplazamiento(){
	PORTD = (PORTD!=128)?((PORTD==SEC_1) || (PORTD==SEC_2))?1:(PORTD<<1):1;
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	80 38       	cpi	r24, 0x80	; 128
  dc:	49 f0       	breq	.+18     	; 0xf0 <desplazamiento+0x18>
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	85 35       	cpi	r24, 0x55	; 85
  e2:	41 f0       	breq	.+16     	; 0xf4 <desplazamiento+0x1c>
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8a 3a       	cpi	r24, 0xAA	; 170
  e8:	39 f0       	breq	.+14     	; 0xf8 <desplazamiento+0x20>
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	88 0f       	add	r24, r24
  ee:	05 c0       	rjmp	.+10     	; 0xfa <desplazamiento+0x22>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	03 c0       	rjmp	.+6      	; 0xfa <desplazamiento+0x22>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	01 c0       	rjmp	.+2      	; 0xfa <desplazamiento+0x22>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	2f e9       	ldi	r18, 0x9F	; 159
  fe:	86 e8       	ldi	r24, 0x86	; 134
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <desplazamiento+0x2a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <desplazamiento+0x34>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <main>:
    /* Replace with your application code */
	Estado *estado1 = NULL;
	Estado *estado2 = NULL;
	Estado *estado3 = NULL;
	Estado *estadoActual = NULL;
	estado1 = (Estado *)malloc(sizeof(Estado));
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 c4 00 	call	0x188	; 0x188 <malloc>
 118:	6c 01       	movw	r12, r24
	estado2 = (Estado *)malloc(sizeof(Estado));
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 c4 00 	call	0x188	; 0x188 <malloc>
 122:	8c 01       	movw	r16, r24
	estado3 = (Estado *)malloc(sizeof(Estado));
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 c4 00 	call	0x188	; 0x188 <malloc>
 12c:	7c 01       	movw	r14, r24
	estadoActual = (Estado *)malloc(sizeof(Estado));
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 c4 00 	call	0x188	; 0x188 <malloc>
 136:	ec 01       	movw	r28, r24
	estado1->funcionamiento = apagado;
 138:	83 e5       	ldi	r24, 0x53	; 83
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	f6 01       	movw	r30, r12
 13e:	91 83       	std	Z+1, r25	; 0x01
 140:	80 83       	st	Z, r24
	estado1->siguiente = estado2;
 142:	13 83       	std	Z+3, r17	; 0x03
 144:	02 83       	std	Z+2, r16	; 0x02
	estado2->funcionamiento = parpadeo;
 146:	25 e5       	ldi	r18, 0x55	; 85
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f8 01       	movw	r30, r16
 14c:	31 83       	std	Z+1, r19	; 0x01
 14e:	20 83       	st	Z, r18
	estado2->siguiente = estado3;
 150:	f3 82       	std	Z+3, r15	; 0x03
 152:	e2 82       	std	Z+2, r14	; 0x02
	estado3->funcionamiento = desplazamiento;
 154:	2c e6       	ldi	r18, 0x6C	; 108
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f7 01       	movw	r30, r14
 15a:	31 83       	std	Z+1, r19	; 0x01
 15c:	20 83       	st	Z, r18
	estado3->siguiente = estado1;
 15e:	d3 82       	std	Z+3, r13	; 0x03
 160:	c2 82       	std	Z+2, r12	; 0x02
	estadoActual->funcionamiento = *estado1->funcionamiento;
 162:	99 83       	std	Y+1, r25	; 0x01
 164:	88 83       	st	Y, r24
	estadoActual->siguiente = estado2;
 166:	1b 83       	std	Y+3, r17	; 0x03
 168:	0a 83       	std	Y+2, r16	; 0x02
	DDRD |= 0xFF;
 16a:	8a b1       	in	r24, 0x0a	; 10
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1<<DDC0);
 170:	38 98       	cbi	0x07, 0	; 7
    while (1) 
    {
		estadoActual->funcionamiento();
 172:	e8 81       	ld	r30, Y
 174:	f9 81       	ldd	r31, Y+1	; 0x01
 176:	09 95       	icall
		if ((PINC&(1<<DDC0)) IGUAL_A 1)
 178:	30 9b       	sbis	0x06, 0	; 6
 17a:	fb cf       	rjmp	.-10     	; 0x172 <main+0x62>
		{
			while(((PINC&(1<<DDC0))!=0) IGUAL_A 1);
 17c:	30 99       	sbic	0x06, 0	; 6
 17e:	fe cf       	rjmp	.-4      	; 0x17c <main+0x6c>
			estadoActual = estadoActual->siguiente;
 180:	0a 80       	ldd	r0, Y+2	; 0x02
 182:	db 81       	ldd	r29, Y+3	; 0x03
 184:	c0 2d       	mov	r28, r0
 186:	f5 cf       	rjmp	.-22     	; 0x172 <main+0x62>

00000188 <malloc>:
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	91 05       	cpc	r25, r1
 194:	10 f4       	brcc	.+4      	; 0x19a <malloc+0x12>
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__flp>
 19e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__flp+0x1>
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	a0 e0       	ldi	r26, 0x00	; 0
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	30 97       	sbiw	r30, 0x00	; 0
 1ac:	19 f1       	breq	.+70     	; 0x1f4 <malloc+0x6c>
 1ae:	40 81       	ld	r20, Z
 1b0:	51 81       	ldd	r21, Z+1	; 0x01
 1b2:	02 81       	ldd	r16, Z+2	; 0x02
 1b4:	13 81       	ldd	r17, Z+3	; 0x03
 1b6:	48 17       	cp	r20, r24
 1b8:	59 07       	cpc	r21, r25
 1ba:	c8 f0       	brcs	.+50     	; 0x1ee <malloc+0x66>
 1bc:	84 17       	cp	r24, r20
 1be:	95 07       	cpc	r25, r21
 1c0:	69 f4       	brne	.+26     	; 0x1dc <malloc+0x54>
 1c2:	10 97       	sbiw	r26, 0x00	; 0
 1c4:	31 f0       	breq	.+12     	; 0x1d2 <malloc+0x4a>
 1c6:	12 96       	adiw	r26, 0x02	; 2
 1c8:	0c 93       	st	X, r16
 1ca:	12 97       	sbiw	r26, 0x02	; 2
 1cc:	13 96       	adiw	r26, 0x03	; 3
 1ce:	1c 93       	st	X, r17
 1d0:	27 c0       	rjmp	.+78     	; 0x220 <malloc+0x98>
 1d2:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__flp>
 1d6:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <__flp+0x1>
 1da:	22 c0       	rjmp	.+68     	; 0x220 <malloc+0x98>
 1dc:	21 15       	cp	r18, r1
 1de:	31 05       	cpc	r19, r1
 1e0:	19 f0       	breq	.+6      	; 0x1e8 <malloc+0x60>
 1e2:	42 17       	cp	r20, r18
 1e4:	53 07       	cpc	r21, r19
 1e6:	18 f4       	brcc	.+6      	; 0x1ee <malloc+0x66>
 1e8:	9a 01       	movw	r18, r20
 1ea:	bd 01       	movw	r22, r26
 1ec:	ef 01       	movw	r28, r30
 1ee:	df 01       	movw	r26, r30
 1f0:	f8 01       	movw	r30, r16
 1f2:	db cf       	rjmp	.-74     	; 0x1aa <malloc+0x22>
 1f4:	21 15       	cp	r18, r1
 1f6:	31 05       	cpc	r19, r1
 1f8:	f9 f0       	breq	.+62     	; 0x238 <malloc+0xb0>
 1fa:	28 1b       	sub	r18, r24
 1fc:	39 0b       	sbc	r19, r25
 1fe:	24 30       	cpi	r18, 0x04	; 4
 200:	31 05       	cpc	r19, r1
 202:	80 f4       	brcc	.+32     	; 0x224 <malloc+0x9c>
 204:	8a 81       	ldd	r24, Y+2	; 0x02
 206:	9b 81       	ldd	r25, Y+3	; 0x03
 208:	61 15       	cp	r22, r1
 20a:	71 05       	cpc	r23, r1
 20c:	21 f0       	breq	.+8      	; 0x216 <malloc+0x8e>
 20e:	fb 01       	movw	r30, r22
 210:	93 83       	std	Z+3, r25	; 0x03
 212:	82 83       	std	Z+2, r24	; 0x02
 214:	04 c0       	rjmp	.+8      	; 0x21e <malloc+0x96>
 216:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__flp+0x1>
 21a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__flp>
 21e:	fe 01       	movw	r30, r28
 220:	32 96       	adiw	r30, 0x02	; 2
 222:	44 c0       	rjmp	.+136    	; 0x2ac <malloc+0x124>
 224:	fe 01       	movw	r30, r28
 226:	e2 0f       	add	r30, r18
 228:	f3 1f       	adc	r31, r19
 22a:	81 93       	st	Z+, r24
 22c:	91 93       	st	Z+, r25
 22e:	22 50       	subi	r18, 0x02	; 2
 230:	31 09       	sbc	r19, r1
 232:	39 83       	std	Y+1, r19	; 0x01
 234:	28 83       	st	Y, r18
 236:	3a c0       	rjmp	.+116    	; 0x2ac <malloc+0x124>
 238:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 23c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 240:	23 2b       	or	r18, r19
 242:	41 f4       	brne	.+16     	; 0x254 <malloc+0xcc>
 244:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 248:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 24c:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <__data_end+0x1>
 250:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 254:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 258:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 25c:	21 15       	cp	r18, r1
 25e:	31 05       	cpc	r19, r1
 260:	41 f4       	brne	.+16     	; 0x272 <malloc+0xea>
 262:	2d b7       	in	r18, 0x3d	; 61
 264:	3e b7       	in	r19, 0x3e	; 62
 266:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 26a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 26e:	24 1b       	sub	r18, r20
 270:	35 0b       	sbc	r19, r21
 272:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 276:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 27a:	e2 17       	cp	r30, r18
 27c:	f3 07       	cpc	r31, r19
 27e:	a0 f4       	brcc	.+40     	; 0x2a8 <malloc+0x120>
 280:	2e 1b       	sub	r18, r30
 282:	3f 0b       	sbc	r19, r31
 284:	28 17       	cp	r18, r24
 286:	39 07       	cpc	r19, r25
 288:	78 f0       	brcs	.+30     	; 0x2a8 <malloc+0x120>
 28a:	ac 01       	movw	r20, r24
 28c:	4e 5f       	subi	r20, 0xFE	; 254
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	24 17       	cp	r18, r20
 292:	35 07       	cpc	r19, r21
 294:	48 f0       	brcs	.+18     	; 0x2a8 <malloc+0x120>
 296:	4e 0f       	add	r20, r30
 298:	5f 1f       	adc	r21, r31
 29a:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <__data_end+0x1>
 29e:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <__data_end>
 2a2:	81 93       	st	Z+, r24
 2a4:	91 93       	st	Z+, r25
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <malloc+0x124>
 2a8:	e0 e0       	ldi	r30, 0x00	; 0
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	cf 01       	movw	r24, r30
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <free>:
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	00 97       	sbiw	r24, 0x00	; 0
 2be:	09 f4       	brne	.+2      	; 0x2c2 <free+0xa>
 2c0:	81 c0       	rjmp	.+258    	; 0x3c4 <free+0x10c>
 2c2:	fc 01       	movw	r30, r24
 2c4:	32 97       	sbiw	r30, 0x02	; 2
 2c6:	13 82       	std	Z+3, r1	; 0x03
 2c8:	12 82       	std	Z+2, r1	; 0x02
 2ca:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__flp>
 2ce:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__flp+0x1>
 2d2:	10 97       	sbiw	r26, 0x00	; 0
 2d4:	81 f4       	brne	.+32     	; 0x2f6 <free+0x3e>
 2d6:	20 81       	ld	r18, Z
 2d8:	31 81       	ldd	r19, Z+1	; 0x01
 2da:	82 0f       	add	r24, r18
 2dc:	93 1f       	adc	r25, r19
 2de:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 2e2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 2e6:	28 17       	cp	r18, r24
 2e8:	39 07       	cpc	r19, r25
 2ea:	51 f5       	brne	.+84     	; 0x340 <free+0x88>
 2ec:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 2f0:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 2f4:	67 c0       	rjmp	.+206    	; 0x3c4 <free+0x10c>
 2f6:	ed 01       	movw	r28, r26
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	ce 17       	cp	r28, r30
 2fe:	df 07       	cpc	r29, r31
 300:	40 f4       	brcc	.+16     	; 0x312 <free+0x5a>
 302:	4a 81       	ldd	r20, Y+2	; 0x02
 304:	5b 81       	ldd	r21, Y+3	; 0x03
 306:	9e 01       	movw	r18, r28
 308:	41 15       	cp	r20, r1
 30a:	51 05       	cpc	r21, r1
 30c:	f1 f0       	breq	.+60     	; 0x34a <free+0x92>
 30e:	ea 01       	movw	r28, r20
 310:	f5 cf       	rjmp	.-22     	; 0x2fc <free+0x44>
 312:	d3 83       	std	Z+3, r29	; 0x03
 314:	c2 83       	std	Z+2, r28	; 0x02
 316:	40 81       	ld	r20, Z
 318:	51 81       	ldd	r21, Z+1	; 0x01
 31a:	84 0f       	add	r24, r20
 31c:	95 1f       	adc	r25, r21
 31e:	c8 17       	cp	r28, r24
 320:	d9 07       	cpc	r29, r25
 322:	59 f4       	brne	.+22     	; 0x33a <free+0x82>
 324:	88 81       	ld	r24, Y
 326:	99 81       	ldd	r25, Y+1	; 0x01
 328:	84 0f       	add	r24, r20
 32a:	95 1f       	adc	r25, r21
 32c:	02 96       	adiw	r24, 0x02	; 2
 32e:	91 83       	std	Z+1, r25	; 0x01
 330:	80 83       	st	Z, r24
 332:	8a 81       	ldd	r24, Y+2	; 0x02
 334:	9b 81       	ldd	r25, Y+3	; 0x03
 336:	93 83       	std	Z+3, r25	; 0x03
 338:	82 83       	std	Z+2, r24	; 0x02
 33a:	21 15       	cp	r18, r1
 33c:	31 05       	cpc	r19, r1
 33e:	29 f4       	brne	.+10     	; 0x34a <free+0x92>
 340:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__flp+0x1>
 344:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__flp>
 348:	3d c0       	rjmp	.+122    	; 0x3c4 <free+0x10c>
 34a:	e9 01       	movw	r28, r18
 34c:	fb 83       	std	Y+3, r31	; 0x03
 34e:	ea 83       	std	Y+2, r30	; 0x02
 350:	49 91       	ld	r20, Y+
 352:	59 91       	ld	r21, Y+
 354:	c4 0f       	add	r28, r20
 356:	d5 1f       	adc	r29, r21
 358:	ec 17       	cp	r30, r28
 35a:	fd 07       	cpc	r31, r29
 35c:	61 f4       	brne	.+24     	; 0x376 <free+0xbe>
 35e:	80 81       	ld	r24, Z
 360:	91 81       	ldd	r25, Z+1	; 0x01
 362:	84 0f       	add	r24, r20
 364:	95 1f       	adc	r25, r21
 366:	02 96       	adiw	r24, 0x02	; 2
 368:	e9 01       	movw	r28, r18
 36a:	99 83       	std	Y+1, r25	; 0x01
 36c:	88 83       	st	Y, r24
 36e:	82 81       	ldd	r24, Z+2	; 0x02
 370:	93 81       	ldd	r25, Z+3	; 0x03
 372:	9b 83       	std	Y+3, r25	; 0x03
 374:	8a 83       	std	Y+2, r24	; 0x02
 376:	e0 e0       	ldi	r30, 0x00	; 0
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	12 96       	adiw	r26, 0x02	; 2
 37c:	8d 91       	ld	r24, X+
 37e:	9c 91       	ld	r25, X
 380:	13 97       	sbiw	r26, 0x03	; 3
 382:	00 97       	sbiw	r24, 0x00	; 0
 384:	19 f0       	breq	.+6      	; 0x38c <free+0xd4>
 386:	fd 01       	movw	r30, r26
 388:	dc 01       	movw	r26, r24
 38a:	f7 cf       	rjmp	.-18     	; 0x37a <free+0xc2>
 38c:	8d 91       	ld	r24, X+
 38e:	9c 91       	ld	r25, X
 390:	11 97       	sbiw	r26, 0x01	; 1
 392:	9d 01       	movw	r18, r26
 394:	2e 5f       	subi	r18, 0xFE	; 254
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	82 0f       	add	r24, r18
 39a:	93 1f       	adc	r25, r19
 39c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 3a0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	69 f4       	brne	.+26     	; 0x3c4 <free+0x10c>
 3aa:	30 97       	sbiw	r30, 0x00	; 0
 3ac:	29 f4       	brne	.+10     	; 0x3b8 <free+0x100>
 3ae:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__flp+0x1>
 3b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__flp>
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <free+0x104>
 3b8:	13 82       	std	Z+3, r1	; 0x03
 3ba:	12 82       	std	Z+2, r1	; 0x02
 3bc:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x1>
 3c0:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end>
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <_exit>:
 3ca:	f8 94       	cli

000003cc <__stop_program>:
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <__stop_program>
