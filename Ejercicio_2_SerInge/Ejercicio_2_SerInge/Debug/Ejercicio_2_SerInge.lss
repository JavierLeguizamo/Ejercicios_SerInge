
Ejercicio_2_SerInge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000814  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e7  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031a  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f1  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010e  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <parpadeo>:
	
void apagado(){
	ESCRIBIR_PD(0);
}
void parpadeo(){
	ESCRIBIR_PD(SECUENCIA_1);
  80:	85 e5       	ldi	r24, 0x55	; 85
  82:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f e9       	ldi	r18, 0x9F	; 159
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	91 e0       	ldi	r25, 0x01	; 1
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <parpadeo+0xa>
  92:	00 c0       	rjmp	.+0      	; 0x94 <parpadeo+0x14>
  94:	00 00       	nop
	_delay_ms(ESPERA);
	ESCRIBIR_PD(SECUENCIA_2);
  96:	8a ea       	ldi	r24, 0xAA	; 170
  98:	8b b9       	out	0x0b, r24	; 11
  9a:	2f e9       	ldi	r18, 0x9F	; 159
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <parpadeo+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <parpadeo+0x2a>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <desplazamiento>:
	_delay_ms(ESPERA);
	
} 
void desplazamiento(){
	PORTD = (PORTD!=128)?((PORTD==SECUENCIA_1) || (PORTD==SECUENCIA_2))?1:(PORTD<<1):1;
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	80 38       	cpi	r24, 0x80	; 128
  b2:	49 f0       	breq	.+18     	; 0xc6 <desplazamiento+0x18>
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	85 35       	cpi	r24, 0x55	; 85
  b8:	41 f0       	breq	.+16     	; 0xca <desplazamiento+0x1c>
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	8a 3a       	cpi	r24, 0xAA	; 170
  be:	39 f0       	breq	.+14     	; 0xce <desplazamiento+0x20>
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	88 0f       	add	r24, r24
  c4:	05 c0       	rjmp	.+10     	; 0xd0 <desplazamiento+0x22>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <desplazamiento+0x22>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <desplazamiento+0x22>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	2f e9       	ldi	r18, 0x9F	; 159
  d4:	86 e8       	ldi	r24, 0x86	; 134
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <desplazamiento+0x2a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <desplazamiento+0x34>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <main>:
}
int main(void)
{
    /* Replace with your application code */
	Estado estado = estado1;
	CONFIG_SALIDAS_PD(TODOS_BITS_SALIDAS);
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a b9       	out	0x0a, r24	; 10
	_delay_ms(ESPERA);
}
int main(void)
{
    /* Replace with your application code */
	Estado estado = estado1;
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <main+0xc>
				break;
			case estado3:
				desplazamiento();
				break;
			default:
				estado = estado1;
  f0:	c0 e0       	ldi	r28, 0x00	; 0
    /* Replace with your application code */
	Estado estado = estado1;
	CONFIG_SALIDAS_PD(TODOS_BITS_SALIDAS);
    while (1) 
    {
		if (LEER_BIT_PC(BOTON) == APAGADO)
  f2:	30 9b       	sbis	0x06, 0	; 6
  f4:	03 c0       	rjmp	.+6      	; 0xfc <main+0x16>
		{
			ESPERA_SOLTAR_BOTON(BOTON);
  f6:	30 99       	sbic	0x06, 0	; 6
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <main+0x10>
			SIGUIENTE_ESTADO;
  fa:	cf 5f       	subi	r28, 0xFF	; 255
		}
		switch(estado){
  fc:	c1 30       	cpi	r28, 0x01	; 1
  fe:	31 f0       	breq	.+12     	; 0x10c <main+0x26>
 100:	18 f0       	brcs	.+6      	; 0x108 <main+0x22>
 102:	c2 30       	cpi	r28, 0x02	; 2
 104:	31 f0       	breq	.+12     	; 0x112 <main+0x2c>
 106:	f4 cf       	rjmp	.-24     	; 0xf0 <main+0xa>
			estado2,
			estado3
}Estado;
	
void apagado(){
	ESCRIBIR_PD(0);
 108:	1b b8       	out	0x0b, r1	; 11
 10a:	f3 cf       	rjmp	.-26     	; 0xf2 <main+0xc>
		switch(estado){
			case estado1:
				apagado();
				break;
			case estado2:
				parpadeo();
 10c:	0e 94 40 00 	call	0x80	; 0x80 <parpadeo>
				break;
 110:	f0 cf       	rjmp	.-32     	; 0xf2 <main+0xc>
			case estado3:
				desplazamiento();
 112:	0e 94 57 00 	call	0xae	; 0xae <desplazamiento>
				break;
 116:	ed cf       	rjmp	.-38     	; 0xf2 <main+0xc>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
